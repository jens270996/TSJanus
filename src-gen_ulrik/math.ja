// Generated program math
// Memory characteristics: max object size = 1, max stack depth = 10
procedure dispatch_apply(int heap[][],int heap_counter,int this,int var_var,int var_value)
  if heap[this][0]=2 then
    call Add_apply(heap,heap_counter,this,var_var,var_value)
  else
    if heap[this][0]=1 then
      call Operator_apply(heap,heap_counter,this,var_var,var_value)
    else
      if heap[this][0]=3 then
        call Sub_apply(heap,heap_counter,this,var_var,var_value)
      else
        if heap[this][0]=4 then
          call Twice_apply(heap,heap_counter,this,var_var,var_value)
        else
          local int class_id = heap[this][0]
          printf("Error when dispatching method apply to this=%d, class=%d, Add=2 Operator=1 Sub=3 Twice=4 ",this,class_id)
          delocal int class_id = heap[this][0]
          error("Method not found")
        fi heap[this][0]=4
      fi heap[this][0]=3
    fi heap[this][0]=1
  fi heap[this][0]=2
procedure dispatch_do(int heap[][],int heap_counter,int this,int var_a,int var_b,int var_c,int var_d,int var_e)
  if heap[this][0]=5 then
    call Test_do(heap,heap_counter,this,var_a,var_b,var_c,var_d,var_e)
  else
    local int class_id = heap[this][0]
    printf("Error when dispatching method do to this=%d, class=%d, Test=5 ",this,class_id)
    delocal int class_id = heap[this][0]
    error("Method not found")
  fi heap[this][0]=5
procedure constructor_Operator(int heap[][],int heap_counter,int this)
  heap[this][0] += 1
procedure constructor_Add(int heap[][],int heap_counter,int this)
  heap[this][0] += 2
procedure Add_apply(int heap[][],int heap_counter,int this,int var_var,int var_value)
  local int heap_counter_check = heap_counter
  local int this_check = this
  local int this_class_check = heap[this][0]
  var_var += var_value
  printf("Added\\n")
  delocal int this_class_check = heap[this][0]
  delocal int this_check = this
  delocal int heap_counter_check = heap_counter
procedure constructor_Sub(int heap[][],int heap_counter,int this)
  heap[this][0] += 3
procedure Sub_apply(int heap[][],int heap_counter,int this,int var_var,int var_value)
  local int heap_counter_check = heap_counter
  local int this_check = this
  local int this_class_check = heap[this][0]
  var_var -= var_value
  printf("Subtracted\\n")
  delocal int this_class_check = heap[this][0]
  delocal int this_check = this
  delocal int heap_counter_check = heap_counter
procedure constructor_Twice(int heap[][],int heap_counter,int this,int var_op)
  local int this_check = 0
  heap[this][0] += 4
  heap[this][1] += var_op
  this_check += heap[this][0]
  delocal int this_check = 4
procedure Twice_apply(int heap[][],int heap_counter,int this,int var_var,int var_value)
  local int heap_counter_check = heap_counter
  local int this_check = this
  local int this_class_check = heap[this][0]
  local int var_op = heap[this][1]
  call dispatch_apply(heap,heap_counter,var_op,var_var,var_value)
  call dispatch_apply(heap,heap_counter,var_op,var_var,var_value)
  delocal int var_op = heap[this][1]
  delocal int this_class_check = heap[this][0]
  delocal int this_check = this
  delocal int heap_counter_check = heap_counter
procedure constructor_Test(int heap[][],int heap_counter,int this)
  heap[this][0] += 5
procedure Test_do(int heap[][],int heap_counter,int this,int var_a,int var_b,int var_c,int var_d,int var_e)
  local int heap_counter_check = heap_counter
  local int this_check = this
  local int this_class_check = heap[this][0]
  uncall dispatch_apply(heap,heap_counter,var_a,var_e,var_d)
  var_a <=> var_b
  var_c <=> var_d
  printf("Current result value: %d\\n",var_e)
  delocal int this_class_check = heap[this][0]
  delocal int this_check = this
  delocal int heap_counter_check = heap_counter
procedure main()
  int heap[10][1]
  int heap_counter = 1 // 0 represents a null value
  int var_x = 10
  int var_y = 7
  int var_counter = 1
  int var_result = 0
  int var_primary = 0
  int var_other = 0
  int var_test = 0
  var_primary += heap_counter
  heap_counter += 1 // object pseudo allocation
  call constructor_Add(heap,heap_counter,var_primary)
  var_other += heap_counter
  heap_counter += 1 // object pseudo allocation
  call constructor_Sub(heap,heap_counter,var_other)
  var_test += heap_counter
  heap_counter += 1 // object pseudo allocation
  call constructor_Test(heap,heap_counter,var_test)
  call dispatch_do(heap,heap_counter,var_test,var_primary,var_other,var_x,var_y,var_result)
  call dispatch_do(heap,heap_counter,var_test,var_primary,var_other,var_x,var_y,var_result)
  call dispatch_do(heap,heap_counter,var_test,var_primary,var_other,var_x,var_y,var_result)
  call dispatch_do(heap,heap_counter,var_test,var_primary,var_other,var_x,var_y,var_result)
  call dispatch_do(heap,heap_counter,var_test,var_primary,var_other,var_x,var_y,var_result)
  call dispatch_do(heap,heap_counter,var_test,var_primary,var_other,var_x,var_y,var_result)
