// Reversible Turing Machine Simulation
// Yokoyama, Axelsen, Glueck
// Principles of a Reversible Programming Language
// p.46-53
// CF'08, Ischia, Italy
//
// Adapted to classic Janus by poul@diku.dk

q                        // current state
s                        // current tape symbol
leftstk[4]           // tape stack representation
leftsp                 // left stack pointer
rightstk[4]         // tape stack representation
rightsp               // right stack pointer
q1[8] s1[8]        // quadruple rules
s2[8] q2[8]        // quadruple rules
PC_MAX         // number of quadruple rules
pc                      // current rule
QS                    // starting state
QF                    // final state
slash                 // shift direction [/] stay
right                  // shift direction [+] right
left                    // shift direction [-] left
blank                // blank symbol

procedure turing
    from q = QS
    do 
        call inst
        pc += 1
        if pc = PC_MAX then
            pc ^= PC_MAX
        fi pc = 0
    until q = QF

procedure inst
    if q = q1[pc] then
        if s = s1[pc] then // Symbol rule:
            q += q2[pc] - q1[pc] // set q to q2[pc]
            s += s2[pc] - s1[pc] // set s to s2[pc]
        else
            if s1[pc] = slash then // Shift rule:
                q += q2[pc] - q1[pc] // set q to q2[pc]
                if s2[pc] = right then
                    call pushleft // push s on left
                    uncall pushright // pop right to s
                else
                    if s2[pc]=left then
                        call pushright // push s on right
                        uncall pushleft // pop left to s
                    fi s2[pc] = left
                fi s2[pc] = right
            fi s1[pc] = slash
        fi s = s2[pc]
    fi q = q2[pc]

procedure pushleft
    if (leftsp = 0) && (s = blank) then
        s ^= blank // zero-clear s
    else
        leftstk[leftsp] ^= s
        leftsp += 1
    fi leftsp = 0

procedure pushright
    if (rightsp = 0) && (s = blank) then
        s ^= blank // zero-clear s
    else
        rightstk[rightsp] ^= s
        rightsp += 1
    fi rightsp = 0

// setup
procedure init
    left    ^= 100
    slash ^= 101
    right  ^= 102
    blank ^= 200

// RTM for binary number incrementation
procedure binaryInc
    PC_MAX ^= 8 // # of rules
    q ^= 1
    QS ^= 1            // start state
    QF ^= 6            // finish state
    // symbol rule
    q1[0] ^= 1
    s1[0] ^= blank
    s2[0] ^= blank
    q2[0] ^= 2
    // shift rule
    q1[1] ^= 2
    s1[1] ^= slash
    s2[1] ^= right
    q2[1] ^= 3
    // symbol rule
    q1[2] ^= 3
    s1[2] ^= 0
    s2[2] ^= 1
    q2[2] ^= 4
    // symbol rule
    q1[3] ^= 3
    s1[3] ^= 1
    s2[3] ^= 0
    q2[3] ^= 2
    // symbol rule
    q1[4] ^= 3
    s1[4] ^= blank
    s2[4] ^= blank
    q2[4] ^= 4
    // shift rule
    q1[5] ^= 4
    s1[5] ^= slash
    s2[5] ^= left
    q2[5] ^= 5
    // symbol rule
    q1[6] ^= 5
    s1[6] ^= 0
    s2[6] ^= 0
    q2[6] ^= 4
    // symbol rule
    q1[7] ^= 5
    s1[7] ^= blank
    s2[7] ^= blank
    q2[7] ^= 6

procedure main
    call init
    call binaryInc
    s ^= blank
    call turing
